{"version":3,"sources":["../../../node_modules/regjsparser/parser.js"],"names":["parse","str","flags","addRaw","node","raw","substring","range","updateRawStart","start","createAnchor","kind","rawLength","type","pos","createValue","codePoint","from","to","createEscaped","value","fromOffset","length","createCharacter","matches","_char","first","charCodeAt","hasUnicodeFlag","second","lookahead","createDisjunction","alternatives","body","createDot","createCharacterClassEscape","createReference","matchIndex","parseInt","createGroup","behavior","disjunction","createQuantifier","min","max","greedy","createAlternative","terms","createCharacterClass","classRanges","negative","createClassRange","bail","flattenBody","isEmpty","obj","incr","amount","res","skip","match","indexOf","current","next","matchReg","regExp","subStr","parseDisjunction","push","parseAlternative","term","parseTerm","anchor","parseAnchor","atom","parseAtom","quantifier","parseQuantifier","parseGroup","matchA","typeA","matchB","typeB","group","firstIteration","closedCaptureCounter","undefined","parseAtomEscape","parseCharacterClass","parseUnicodeSurrogatePairEscape","firstEscape","prevPos","secondEscape","parseClassEscape","insideCharacterClass","parseDecimalEscape","parseCharacterEscape","refIdx","backrefDenied","test","parseIdentityEscape","isIdentifierPart","ch","NonAsciiIdentifierPart","RegExp","String","fromCharCode","ZWJ","ZWNJ","tmp","parseClassRanges","parseNonemptyClassRanges","parseHelperClassRanges","parseClassAtom","concat","parseNonemptyClassRangesNoDash","parseClassAtomNoDash","message","details","contextStart","Math","contextEnd","context","pointer","Array","join","SyntaxError","result","i","regjsparser","module","exports","window"],"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","file":"parser.js","sourcesContent":["// regjsparser\n//\n// ==================================================================\n//\n// See ECMA-262 Standard: 15.10.1\n//\n// NOTE: The ECMA-262 standard uses the term \"Assertion\" for /^/. Here the\n//   term \"Anchor\" is used.\n//\n// Pattern ::\n//      Disjunction\n//\n// Disjunction ::\n//      Alternative\n//      Alternative | Disjunction\n//\n// Alternative ::\n//      [empty]\n//      Alternative Term\n//\n// Term ::\n//      Anchor\n//      Atom\n//      Atom Quantifier\n//\n// Anchor ::\n//      ^\n//      $\n//      \\ b\n//      \\ B\n//      ( ? = Disjunction )\n//      ( ? ! Disjunction )\n//\n// Quantifier ::\n//      QuantifierPrefix\n//      QuantifierPrefix ?\n//\n// QuantifierPrefix ::\n//      *\n//      +\n//      ?\n//      { DecimalDigits }\n//      { DecimalDigits , }\n//      { DecimalDigits , DecimalDigits }\n//\n// Atom ::\n//      PatternCharacter\n//      .\n//      \\ AtomEscape\n//      CharacterClass\n//      ( Disjunction )\n//      ( ? : Disjunction )\n//\n// PatternCharacter ::\n//      SourceCharacter but not any of: ^ $ \\ . * + ? ( ) [ ] { } |\n//\n// AtomEscape ::\n//      DecimalEscape\n//      CharacterEscape\n//      CharacterClassEscape\n//\n// CharacterEscape[U] ::\n//      ControlEscape\n//      c ControlLetter\n//      HexEscapeSequence\n//      RegExpUnicodeEscapeSequence[?U] (ES6)\n//      IdentityEscape[?U]\n//\n// ControlEscape ::\n//      one of f n r t v\n// ControlLetter ::\n//      one of\n//          a b c d e f g h i j k l m n o p q r s t u v w x y z\n//          A B C D E F G H I J K L M N O P Q R S T U V W X Y Z\n//\n// IdentityEscape ::\n//      SourceCharacter but not IdentifierPart\n//      <ZWJ>\n//      <ZWNJ>\n//\n// DecimalEscape ::\n//      DecimalIntegerLiteral [lookahead ∉ DecimalDigit]\n//\n// CharacterClassEscape ::\n//      one of d D s S w W\n//\n// CharacterClass ::\n//      [ [lookahead ∉ {^}] ClassRanges ]\n//      [ ^ ClassRanges ]\n//\n// ClassRanges ::\n//      [empty]\n//      NonemptyClassRanges\n//\n// NonemptyClassRanges ::\n//      ClassAtom\n//      ClassAtom NonemptyClassRangesNoDash\n//      ClassAtom - ClassAtom ClassRanges\n//\n// NonemptyClassRangesNoDash ::\n//      ClassAtom\n//      ClassAtomNoDash NonemptyClassRangesNoDash\n//      ClassAtomNoDash - ClassAtom ClassRanges\n//\n// ClassAtom ::\n//      -\n//      ClassAtomNoDash\n//\n// ClassAtomNoDash ::\n//      SourceCharacter but not one of \\ or ] or -\n//      \\ ClassEscape\n//\n// ClassEscape ::\n//      DecimalEscape\n//      b\n//      CharacterEscape\n//      CharacterClassEscape\n\n(function() {\n\n  function parse(str, flags) {\n    function addRaw(node) {\n      node.raw = str.substring(node.range[0], node.range[1]);\n      return node;\n    }\n\n    function updateRawStart(node, start) {\n      node.range[0] = start;\n      return addRaw(node);\n    }\n\n    function createAnchor(kind, rawLength) {\n      return addRaw({\n        type: 'anchor',\n        kind: kind,\n        range: [\n          pos - rawLength,\n          pos\n        ]\n      });\n    }\n\n    function createValue(kind, codePoint, from, to) {\n      return addRaw({\n        type: 'value',\n        kind: kind,\n        codePoint: codePoint,\n        range: [from, to]\n      });\n    }\n\n    function createEscaped(kind, codePoint, value, fromOffset) {\n      fromOffset = fromOffset || 0;\n      return createValue(kind, codePoint, pos - (value.length + fromOffset), pos);\n    }\n\n    function createCharacter(matches) {\n      var _char = matches[0];\n      var first = _char.charCodeAt(0);\n      if (hasUnicodeFlag) {\n        var second;\n        if (_char.length === 1 && first >= 0xD800 && first <= 0xDBFF) {\n          second = lookahead().charCodeAt(0);\n          if (second >= 0xDC00 && second <= 0xDFFF) {\n            // Unicode surrogate pair\n            pos++;\n            return createValue(\n                'symbol',\n                (first - 0xD800) * 0x400 + second - 0xDC00 + 0x10000,\n                pos - 2, pos);\n          }\n        }\n      }\n      return createValue('symbol', first, pos - 1, pos);\n    }\n\n    function createDisjunction(alternatives, from, to) {\n      return addRaw({\n        type: 'disjunction',\n        body: alternatives,\n        range: [\n          from,\n          to\n        ]\n      });\n    }\n\n    function createDot() {\n      return addRaw({\n        type: 'dot',\n        range: [\n          pos - 1,\n          pos\n        ]\n      });\n    }\n\n    function createCharacterClassEscape(value) {\n      return addRaw({\n        type: 'characterClassEscape',\n        value: value,\n        range: [\n          pos - 2,\n          pos\n        ]\n      });\n    }\n\n    function createReference(matchIndex) {\n      return addRaw({\n        type: 'reference',\n        matchIndex: parseInt(matchIndex, 10),\n        range: [\n          pos - 1 - matchIndex.length,\n          pos\n        ]\n      });\n    }\n\n    function createGroup(behavior, disjunction, from, to) {\n      return addRaw({\n        type: 'group',\n        behavior: behavior,\n        body: disjunction,\n        range: [\n          from,\n          to\n        ]\n      });\n    }\n\n    function createQuantifier(min, max, from, to) {\n      if (to == null) {\n        from = pos - 1;\n        to = pos;\n      }\n\n      return addRaw({\n        type: 'quantifier',\n        min: min,\n        max: max,\n        greedy: true,\n        body: null, // set later on\n        range: [\n          from,\n          to\n        ]\n      });\n    }\n\n    function createAlternative(terms, from, to) {\n      return addRaw({\n        type: 'alternative',\n        body: terms,\n        range: [\n          from,\n          to\n        ]\n      });\n    }\n\n    function createCharacterClass(classRanges, negative, from, to) {\n      return addRaw({\n        type: 'characterClass',\n        body: classRanges,\n        negative: negative,\n        range: [\n          from,\n          to\n        ]\n      });\n    }\n\n    function createClassRange(min, max, from, to) {\n      // See 15.10.2.15:\n      if (min.codePoint > max.codePoint) {\n        bail('invalid range in character class', min.raw + '-' + max.raw, from, to);\n      }\n\n      return addRaw({\n        type: 'characterClassRange',\n        min: min,\n        max: max,\n        range: [\n          from,\n          to\n        ]\n      });\n    }\n\n    function flattenBody(body) {\n      if (body.type === 'alternative') {\n        return body.body;\n      } else {\n        return [body];\n      }\n    }\n\n    function isEmpty(obj) {\n      return obj.type === 'empty';\n    }\n\n    function incr(amount) {\n      amount = (amount || 1);\n      var res = str.substring(pos, pos + amount);\n      pos += (amount || 1);\n      return res;\n    }\n\n    function skip(value) {\n      if (!match(value)) {\n        bail('character', value);\n      }\n    }\n\n    function match(value) {\n      if (str.indexOf(value, pos) === pos) {\n        return incr(value.length);\n      }\n    }\n\n    function lookahead() {\n      return str[pos];\n    }\n\n    function current(value) {\n      return str.indexOf(value, pos) === pos;\n    }\n\n    function next(value) {\n      return str[pos + 1] === value;\n    }\n\n    function matchReg(regExp) {\n      var subStr = str.substring(pos);\n      var res = subStr.match(regExp);\n      if (res) {\n        res.range = [];\n        res.range[0] = pos;\n        incr(res[0].length);\n        res.range[1] = pos;\n      }\n      return res;\n    }\n\n    function parseDisjunction() {\n      // Disjunction ::\n      //      Alternative\n      //      Alternative | Disjunction\n      var res = [], from = pos;\n      res.push(parseAlternative());\n\n      while (match('|')) {\n        res.push(parseAlternative());\n      }\n\n      if (res.length === 1) {\n        return res[0];\n      }\n\n      return createDisjunction(res, from, pos);\n    }\n\n    function parseAlternative() {\n      var res = [], from = pos;\n      var term;\n\n      // Alternative ::\n      //      [empty]\n      //      Alternative Term\n      while (term = parseTerm()) {\n        res.push(term);\n      }\n\n      if (res.length === 1) {\n        return res[0];\n      }\n\n      return createAlternative(res, from, pos);\n    }\n\n    function parseTerm() {\n      // Term ::\n      //      Anchor\n      //      Atom\n      //      Atom Quantifier\n\n      if (pos >= str.length || current('|') || current(')')) {\n        return null; /* Means: The term is empty */\n      }\n\n      var anchor = parseAnchor();\n\n      if (anchor) {\n        return anchor;\n      }\n\n      var atom = parseAtom();\n      if (!atom) {\n        bail('Expected atom');\n      }\n      var quantifier = parseQuantifier() || false;\n      if (quantifier) {\n        quantifier.body = flattenBody(atom);\n        // The quantifier contains the atom. Therefore, the beginning of the\n        // quantifier range is given by the beginning of the atom.\n        updateRawStart(quantifier, atom.range[0]);\n        return quantifier;\n      }\n      return atom;\n    }\n\n    function parseGroup(matchA, typeA, matchB, typeB) {\n      var type = null, from = pos;\n\n      if (match(matchA)) {\n        type = typeA;\n      } else if (match(matchB)) {\n        type = typeB;\n      } else {\n        return false;\n      }\n\n      var body = parseDisjunction();\n      if (!body) {\n        bail('Expected disjunction');\n      }\n      skip(')');\n      var group = createGroup(type, flattenBody(body), from, pos);\n\n      if (type == 'normal') {\n        // Keep track of the number of closed groups. This is required for\n        // parseDecimalEscape(). In case the string is parsed a second time the\n        // value already holds the total count and no incrementation is required.\n        if (firstIteration) {\n          closedCaptureCounter++;\n        }\n      }\n      return group;\n    }\n\n    function parseAnchor() {\n      // Anchor ::\n      //      ^\n      //      $\n      //      \\ b\n      //      \\ B\n      //      ( ? = Disjunction )\n      //      ( ? ! Disjunction )\n      var res, from = pos;\n\n      if (match('^')) {\n        return createAnchor('start', 1 /* rawLength */);\n      } else if (match('$')) {\n        return createAnchor('end', 1 /* rawLength */);\n      } else if (match('\\\\b')) {\n        return createAnchor('boundary', 2 /* rawLength */);\n      } else if (match('\\\\B')) {\n        return createAnchor('not-boundary', 2 /* rawLength */);\n      } else {\n        return parseGroup('(?=', 'lookahead', '(?!', 'negativeLookahead');\n      }\n    }\n\n    function parseQuantifier() {\n      // Quantifier ::\n      //      QuantifierPrefix\n      //      QuantifierPrefix ?\n      //\n      // QuantifierPrefix ::\n      //      *\n      //      +\n      //      ?\n      //      { DecimalDigits }\n      //      { DecimalDigits , }\n      //      { DecimalDigits , DecimalDigits }\n\n      var res, from = pos;\n      var quantifier;\n      var min, max;\n\n      if (match('*')) {\n        quantifier = createQuantifier(0);\n      }\n      else if (match('+')) {\n        quantifier = createQuantifier(1);\n      }\n      else if (match('?')) {\n        quantifier = createQuantifier(0, 1);\n      }\n      else if (res = matchReg(/^\\{([0-9]+)\\}/)) {\n        min = parseInt(res[1], 10);\n        quantifier = createQuantifier(min, min, res.range[0], res.range[1]);\n      }\n      else if (res = matchReg(/^\\{([0-9]+),\\}/)) {\n        min = parseInt(res[1], 10);\n        quantifier = createQuantifier(min, undefined, res.range[0], res.range[1]);\n      }\n      else if (res = matchReg(/^\\{([0-9]+),([0-9]+)\\}/)) {\n        min = parseInt(res[1], 10);\n        max = parseInt(res[2], 10);\n        if (min > max) {\n          bail('numbers out of order in {} quantifier', '', from, pos);\n        }\n        quantifier = createQuantifier(min, max, res.range[0], res.range[1]);\n      }\n\n      if (quantifier) {\n        if (match('?')) {\n          quantifier.greedy = false;\n          quantifier.range[1] += 1;\n        }\n      }\n\n      return quantifier;\n    }\n\n    function parseAtom() {\n      // Atom ::\n      //      PatternCharacter\n      //      .\n      //      \\ AtomEscape\n      //      CharacterClass\n      //      ( Disjunction )\n      //      ( ? : Disjunction )\n\n      var res;\n\n      // jviereck: allow ']', '}' here as well to be compatible with browser's\n      //   implementations: ']'.match(/]/);\n      // if (res = matchReg(/^[^^$\\\\.*+?()[\\]{}|]/)) {\n      if (res = matchReg(/^[^^$\\\\.*+?(){[|]/)) {\n        //      PatternCharacter\n        return createCharacter(res);\n      }\n      else if (match('.')) {\n        //      .\n        return createDot();\n      }\n      else if (match('\\\\')) {\n        //      \\ AtomEscape\n        res = parseAtomEscape();\n        if (!res) {\n          bail('atomEscape');\n        }\n        return res;\n      }\n      else if (res = parseCharacterClass()) {\n        return res;\n      }\n      else {\n        //      ( Disjunction )\n        //      ( ? : Disjunction )\n        return parseGroup('(?:', 'ignore', '(', 'normal');\n      }\n    }\n\n    function parseUnicodeSurrogatePairEscape(firstEscape) {\n      if (hasUnicodeFlag) {\n        var first, second;\n        if (firstEscape.kind == 'unicodeEscape' &&\n          (first = firstEscape.codePoint) >= 0xD800 && first <= 0xDBFF &&\n          current('\\\\') && next('u') ) {\n          var prevPos = pos;\n          pos++;\n          var secondEscape = parseClassEscape();\n          if (secondEscape.kind == 'unicodeEscape' &&\n            (second = secondEscape.codePoint) >= 0xDC00 && second <= 0xDFFF) {\n            // Unicode surrogate pair\n            firstEscape.range[1] = secondEscape.range[1];\n            firstEscape.codePoint = (first - 0xD800) * 0x400 + second - 0xDC00 + 0x10000;\n            firstEscape.type = 'value';\n            firstEscape.kind = 'unicodeCodePointEscape';\n            addRaw(firstEscape);\n          }\n          else {\n            pos = prevPos;\n          }\n        }\n      }\n      return firstEscape;\n    }\n\n    function parseClassEscape() {\n      return parseAtomEscape(true);\n    }\n\n    function parseAtomEscape(insideCharacterClass) {\n      // AtomEscape ::\n      //      DecimalEscape\n      //      CharacterEscape\n      //      CharacterClassEscape\n\n      var res, from = pos;\n\n      res = parseDecimalEscape();\n      if (res) {\n        return res;\n      }\n\n      // For ClassEscape\n      if (insideCharacterClass) {\n        if (match('b')) {\n          // 15.10.2.19\n          // The production ClassEscape :: b evaluates by returning the\n          // CharSet containing the one character <BS> (Unicode value 0008).\n          return createEscaped('singleEscape', 0x0008, '\\\\b');\n        } else if (match('B')) {\n          bail('\\\\B not possible inside of CharacterClass', '', from);\n        }\n      }\n\n      res = parseCharacterEscape();\n\n      return res;\n    }\n\n\n    function parseDecimalEscape() {\n      // DecimalEscape ::\n      //      DecimalIntegerLiteral [lookahead ∉ DecimalDigit]\n      //      CharacterClassEscape :: one of d D s S w W\n\n      var res, match;\n\n      if (res = matchReg(/^(?!0)\\d+/)) {\n        match = res[0];\n        var refIdx = parseInt(res[0], 10);\n        if (refIdx <= closedCaptureCounter) {\n          // If the number is smaller than the normal-groups found so\n          // far, then it is a reference...\n          return createReference(res[0]);\n        } else {\n          // ... otherwise it needs to be interpreted as a octal (if the\n          // number is in an octal format). If it is NOT octal format,\n          // then the slash is ignored and the number is matched later\n          // as normal characters.\n\n          // Recall the negative decision to decide if the input must be parsed\n          // a second time with the total normal-groups.\n          backrefDenied.push(refIdx);\n\n          // Reset the position again, as maybe only parts of the previous\n          // matched numbers are actual octal numbers. E.g. in '019' only\n          // the '01' should be matched.\n          incr(-res[0].length);\n          if (res = matchReg(/^[0-7]{1,3}/)) {\n            return createEscaped('octal', parseInt(res[0], 8), res[0], 1);\n          } else {\n            // If we end up here, we have a case like /\\91/. Then the\n            // first slash is to be ignored and the 9 & 1 to be treated\n            // like ordinary characters. Create a character for the\n            // first number only here - other number-characters\n            // (if available) will be matched later.\n            res = createCharacter(matchReg(/^[89]/));\n            return updateRawStart(res, res.range[0] - 1);\n          }\n        }\n      }\n      // Only allow octal numbers in the following. All matched numbers start\n      // with a zero (if the do not, the previous if-branch is executed).\n      // If the number is not octal format and starts with zero (e.g. `091`)\n      // then only the zeros `0` is treated here and the `91` are ordinary\n      // characters.\n      // Example:\n      //   /\\091/.exec('\\091')[0].length === 3\n      else if (res = matchReg(/^[0-7]{1,3}/)) {\n        match = res[0];\n        if (/^0{1,3}$/.test(match)) {\n          // If they are all zeros, then only take the first one.\n          return createEscaped('null', 0x0000, '0', match.length + 1);\n        } else {\n          return createEscaped('octal', parseInt(match, 8), match, 1);\n        }\n      } else if (res = matchReg(/^[dDsSwW]/)) {\n        return createCharacterClassEscape(res[0]);\n      }\n      return false;\n    }\n\n    function parseCharacterEscape() {\n      // CharacterEscape ::\n      //      ControlEscape\n      //      c ControlLetter\n      //      HexEscapeSequence\n      //      UnicodeEscapeSequence\n      //      IdentityEscape\n\n      var res;\n      if (res = matchReg(/^[fnrtv]/)) {\n        // ControlEscape\n        var codePoint = 0;\n        switch (res[0]) {\n          case 't': codePoint = 0x009; break;\n          case 'n': codePoint = 0x00A; break;\n          case 'v': codePoint = 0x00B; break;\n          case 'f': codePoint = 0x00C; break;\n          case 'r': codePoint = 0x00D; break;\n        }\n        return createEscaped('singleEscape', codePoint, '\\\\' + res[0]);\n      } else if (res = matchReg(/^c([a-zA-Z])/)) {\n        // c ControlLetter\n        return createEscaped('controlLetter', res[1].charCodeAt(0) % 32, res[1], 2);\n      } else if (res = matchReg(/^x([0-9a-fA-F]{2})/)) {\n        // HexEscapeSequence\n        return createEscaped('hexadecimalEscape', parseInt(res[1], 16), res[1], 2);\n      } else if (res = matchReg(/^u([0-9a-fA-F]{4})/)) {\n        // UnicodeEscapeSequence\n        return parseUnicodeSurrogatePairEscape(\n          createEscaped('unicodeEscape', parseInt(res[1], 16), res[1], 2)\n        );\n      } else if (hasUnicodeFlag && (res = matchReg(/^u\\{([0-9a-fA-F]+)\\}/))) {\n        // RegExpUnicodeEscapeSequence (ES6 Unicode code point escape)\n        return createEscaped('unicodeCodePointEscape', parseInt(res[1], 16), res[1], 4);\n      } else {\n        // IdentityEscape\n        return parseIdentityEscape();\n      }\n    }\n\n    // Taken from the Esprima parser.\n    function isIdentifierPart(ch) {\n      // Generated by `tools/generate-identifier-regex.js`.\n      var NonAsciiIdentifierPart = new RegExp('[\\xAA\\xB5\\xBA\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0300-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u037F\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u0483-\\u0487\\u048A-\\u052F\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u0591-\\u05BD\\u05BF\\u05C1\\u05C2\\u05C4\\u05C5\\u05C7\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0610-\\u061A\\u0620-\\u0669\\u066E-\\u06D3\\u06D5-\\u06DC\\u06DF-\\u06E8\\u06EA-\\u06FC\\u06FF\\u0710-\\u074A\\u074D-\\u07B1\\u07C0-\\u07F5\\u07FA\\u0800-\\u082D\\u0840-\\u085B\\u08A0-\\u08B2\\u08E4-\\u0963\\u0966-\\u096F\\u0971-\\u0983\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BC-\\u09C4\\u09C7\\u09C8\\u09CB-\\u09CE\\u09D7\\u09DC\\u09DD\\u09DF-\\u09E3\\u09E6-\\u09F1\\u0A01-\\u0A03\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A3C\\u0A3E-\\u0A42\\u0A47\\u0A48\\u0A4B-\\u0A4D\\u0A51\\u0A59-\\u0A5C\\u0A5E\\u0A66-\\u0A75\\u0A81-\\u0A83\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABC-\\u0AC5\\u0AC7-\\u0AC9\\u0ACB-\\u0ACD\\u0AD0\\u0AE0-\\u0AE3\\u0AE6-\\u0AEF\\u0B01-\\u0B03\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3C-\\u0B44\\u0B47\\u0B48\\u0B4B-\\u0B4D\\u0B56\\u0B57\\u0B5C\\u0B5D\\u0B5F-\\u0B63\\u0B66-\\u0B6F\\u0B71\\u0B82\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BBE-\\u0BC2\\u0BC6-\\u0BC8\\u0BCA-\\u0BCD\\u0BD0\\u0BD7\\u0BE6-\\u0BEF\\u0C00-\\u0C03\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D-\\u0C44\\u0C46-\\u0C48\\u0C4A-\\u0C4D\\u0C55\\u0C56\\u0C58\\u0C59\\u0C60-\\u0C63\\u0C66-\\u0C6F\\u0C81-\\u0C83\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBC-\\u0CC4\\u0CC6-\\u0CC8\\u0CCA-\\u0CCD\\u0CD5\\u0CD6\\u0CDE\\u0CE0-\\u0CE3\\u0CE6-\\u0CEF\\u0CF1\\u0CF2\\u0D01-\\u0D03\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D-\\u0D44\\u0D46-\\u0D48\\u0D4A-\\u0D4E\\u0D57\\u0D60-\\u0D63\\u0D66-\\u0D6F\\u0D7A-\\u0D7F\\u0D82\\u0D83\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0DCA\\u0DCF-\\u0DD4\\u0DD6\\u0DD8-\\u0DDF\\u0DE6-\\u0DEF\\u0DF2\\u0DF3\\u0E01-\\u0E3A\\u0E40-\\u0E4E\\u0E50-\\u0E59\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB9\\u0EBB-\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EC8-\\u0ECD\\u0ED0-\\u0ED9\\u0EDC-\\u0EDF\\u0F00\\u0F18\\u0F19\\u0F20-\\u0F29\\u0F35\\u0F37\\u0F39\\u0F3E-\\u0F47\\u0F49-\\u0F6C\\u0F71-\\u0F84\\u0F86-\\u0F97\\u0F99-\\u0FBC\\u0FC6\\u1000-\\u1049\\u1050-\\u109D\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u135D-\\u135F\\u1380-\\u138F\\u13A0-\\u13F4\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16EE-\\u16F8\\u1700-\\u170C\\u170E-\\u1714\\u1720-\\u1734\\u1740-\\u1753\\u1760-\\u176C\\u176E-\\u1770\\u1772\\u1773\\u1780-\\u17D3\\u17D7\\u17DC\\u17DD\\u17E0-\\u17E9\\u180B-\\u180D\\u1810-\\u1819\\u1820-\\u1877\\u1880-\\u18AA\\u18B0-\\u18F5\\u1900-\\u191E\\u1920-\\u192B\\u1930-\\u193B\\u1946-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19B0-\\u19C9\\u19D0-\\u19D9\\u1A00-\\u1A1B\\u1A20-\\u1A5E\\u1A60-\\u1A7C\\u1A7F-\\u1A89\\u1A90-\\u1A99\\u1AA7\\u1AB0-\\u1ABD\\u1B00-\\u1B4B\\u1B50-\\u1B59\\u1B6B-\\u1B73\\u1B80-\\u1BF3\\u1C00-\\u1C37\\u1C40-\\u1C49\\u1C4D-\\u1C7D\\u1CD0-\\u1CD2\\u1CD4-\\u1CF6\\u1CF8\\u1CF9\\u1D00-\\u1DF5\\u1DFC-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u200C\\u200D\\u203F\\u2040\\u2054\\u2071\\u207F\\u2090-\\u209C\\u20D0-\\u20DC\\u20E1\\u20E5-\\u20F0\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u212F-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2160-\\u2188\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D7F-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u2DE0-\\u2DFF\\u2E2F\\u3005-\\u3007\\u3021-\\u302F\\u3031-\\u3035\\u3038-\\u303C\\u3041-\\u3096\\u3099\\u309A\\u309D-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312D\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FCC\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA62B\\uA640-\\uA66F\\uA674-\\uA67D\\uA67F-\\uA69D\\uA69F-\\uA6F1\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA78E\\uA790-\\uA7AD\\uA7B0\\uA7B1\\uA7F7-\\uA827\\uA840-\\uA873\\uA880-\\uA8C4\\uA8D0-\\uA8D9\\uA8E0-\\uA8F7\\uA8FB\\uA900-\\uA92D\\uA930-\\uA953\\uA960-\\uA97C\\uA980-\\uA9C0\\uA9CF-\\uA9D9\\uA9E0-\\uA9FE\\uAA00-\\uAA36\\uAA40-\\uAA4D\\uAA50-\\uAA59\\uAA60-\\uAA76\\uAA7A-\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEF\\uAAF2-\\uAAF6\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uAB30-\\uAB5A\\uAB5C-\\uAB5F\\uAB64\\uAB65\\uABC0-\\uABEA\\uABEC\\uABED\\uABF0-\\uABF9\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE00-\\uFE0F\\uFE20-\\uFE2D\\uFE33\\uFE34\\uFE4D-\\uFE4F\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF10-\\uFF19\\uFF21-\\uFF3A\\uFF3F\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]');\n\n      return (ch === 36) || (ch === 95) ||  // $ (dollar) and _ (underscore)\n        (ch >= 65 && ch <= 90) ||         // A..Z\n        (ch >= 97 && ch <= 122) ||        // a..z\n        (ch >= 48 && ch <= 57) ||         // 0..9\n        (ch === 92) ||                    // \\ (backslash)\n        ((ch >= 0x80) && NonAsciiIdentifierPart.test(String.fromCharCode(ch)));\n    }\n\n    function parseIdentityEscape() {\n      // IdentityEscape ::\n      //      SourceCharacter but not IdentifierPart\n      //      <ZWJ>\n      //      <ZWNJ>\n\n      var ZWJ = '\\u200C';\n      var ZWNJ = '\\u200D';\n\n      var tmp;\n\n      if (!isIdentifierPart(lookahead())) {\n        tmp = incr();\n        return createEscaped('identifier', tmp.charCodeAt(0), tmp, 1);\n      }\n\n      if (match(ZWJ)) {\n        // <ZWJ>\n        return createEscaped('identifier', 0x200C, ZWJ);\n      } else if (match(ZWNJ)) {\n        // <ZWNJ>\n        return createEscaped('identifier', 0x200D, ZWNJ);\n      }\n\n      return null;\n    }\n\n    function parseCharacterClass() {\n      // CharacterClass ::\n      //      [ [lookahead ∉ {^}] ClassRanges ]\n      //      [ ^ ClassRanges ]\n\n      var res, from = pos;\n      if (res = matchReg(/^\\[\\^/)) {\n        res = parseClassRanges();\n        skip(']');\n        return createCharacterClass(res, true, from, pos);\n      } else if (match('[')) {\n        res = parseClassRanges();\n        skip(']');\n        return createCharacterClass(res, false, from, pos);\n      }\n\n      return null;\n    }\n\n    function parseClassRanges() {\n      // ClassRanges ::\n      //      [empty]\n      //      NonemptyClassRanges\n\n      var res;\n      if (current(']')) {\n        // Empty array means nothing insinde of the ClassRange.\n        return [];\n      } else {\n        res = parseNonemptyClassRanges();\n        if (!res) {\n          bail('nonEmptyClassRanges');\n        }\n        return res;\n      }\n    }\n\n    function parseHelperClassRanges(atom) {\n      var from, to, res;\n      if (current('-') && !next(']')) {\n        // ClassAtom - ClassAtom ClassRanges\n        skip('-');\n\n        res = parseClassAtom();\n        if (!res) {\n          bail('classAtom');\n        }\n        to = pos;\n        var classRanges = parseClassRanges();\n        if (!classRanges) {\n          bail('classRanges');\n        }\n        from = atom.range[0];\n        if (classRanges.type === 'empty') {\n          return [createClassRange(atom, res, from, to)];\n        }\n        return [createClassRange(atom, res, from, to)].concat(classRanges);\n      }\n\n      res = parseNonemptyClassRangesNoDash();\n      if (!res) {\n        bail('nonEmptyClassRangesNoDash');\n      }\n\n      return [atom].concat(res);\n    }\n\n    function parseNonemptyClassRanges() {\n      // NonemptyClassRanges ::\n      //      ClassAtom\n      //      ClassAtom NonemptyClassRangesNoDash\n      //      ClassAtom - ClassAtom ClassRanges\n\n      var atom = parseClassAtom();\n      if (!atom) {\n        bail('classAtom');\n      }\n\n      if (current(']')) {\n        // ClassAtom\n        return [atom];\n      }\n\n      // ClassAtom NonemptyClassRangesNoDash\n      // ClassAtom - ClassAtom ClassRanges\n      return parseHelperClassRanges(atom);\n    }\n\n    function parseNonemptyClassRangesNoDash() {\n      // NonemptyClassRangesNoDash ::\n      //      ClassAtom\n      //      ClassAtomNoDash NonemptyClassRangesNoDash\n      //      ClassAtomNoDash - ClassAtom ClassRanges\n\n      var res = parseClassAtom();\n      if (!res) {\n        bail('classAtom');\n      }\n      if (current(']')) {\n        //      ClassAtom\n        return res;\n      }\n\n      // ClassAtomNoDash NonemptyClassRangesNoDash\n      // ClassAtomNoDash - ClassAtom ClassRanges\n      return parseHelperClassRanges(res);\n    }\n\n    function parseClassAtom() {\n      // ClassAtom ::\n      //      -\n      //      ClassAtomNoDash\n      if (match('-')) {\n        return createCharacter('-');\n      } else {\n        return parseClassAtomNoDash();\n      }\n    }\n\n    function parseClassAtomNoDash() {\n      // ClassAtomNoDash ::\n      //      SourceCharacter but not one of \\ or ] or -\n      //      \\ ClassEscape\n\n      var res;\n      if (res = matchReg(/^[^\\\\\\]-]/)) {\n        return createCharacter(res[0]);\n      } else if (match('\\\\')) {\n        res = parseClassEscape();\n        if (!res) {\n          bail('classEscape');\n        }\n\n        return parseUnicodeSurrogatePairEscape(res);\n      }\n    }\n\n    function bail(message, details, from, to) {\n      from = from == null ? pos : from;\n      to = to == null ? from : to;\n\n      var contextStart = Math.max(0, from - 10);\n      var contextEnd = Math.min(to + 10, str.length);\n\n      // Output a bit of context and a line pointing to where our error is.\n      //\n      // We are assuming that there are no actual newlines in the content as this is a regular expression.\n      var context = '    ' + str.substring(contextStart, contextEnd);\n      var pointer = '    ' + new Array(from - contextStart + 1).join(' ') + '^';\n\n      throw SyntaxError(message + ' at position ' + from + (details ? ': ' + details : '') + '\\n' + context + '\\n' + pointer);\n    }\n\n    var backrefDenied = [];\n    var closedCaptureCounter = 0;\n    var firstIteration = true;\n    var hasUnicodeFlag = (flags || \"\").indexOf(\"u\") !== -1;\n    var pos = 0;\n\n    // Convert the input to a string and treat the empty string special.\n    str = String(str);\n    if (str === '') {\n      str = '(?:)';\n    }\n\n    var result = parseDisjunction();\n\n    if (result.range[1] !== str.length) {\n      bail('Could not parse entire input - got stuck', '', result.range[1]);\n    }\n\n    // The spec requires to interpret the `\\2` in `/\\2()()/` as backreference.\n    // As the parser collects the number of capture groups as the string is\n    // parsed it is impossible to make these decisions at the point when the\n    // `\\2` is handled. In case the local decision turns out to be wrong after\n    // the parsing has finished, the input string is parsed a second time with\n    // the total number of capture groups set.\n    //\n    // SEE: https://github.com/jviereck/regjsparser/issues/70\n    for (var i = 0; i < backrefDenied.length; i++) {\n      if (backrefDenied[i] <= closedCaptureCounter) {\n        // Parse the input a second time.\n        pos = 0;\n        firstIteration = false;\n        return parseDisjunction();\n      }\n    }\n\n    return result;\n  }\n\n  var regjsparser = {\n    parse: parse\n  };\n\n  if (typeof module !== 'undefined' && module.exports) {\n    module.exports = regjsparser;\n  } else {\n    window.regjsparser = regjsparser;\n  }\n\n}());\n"]}