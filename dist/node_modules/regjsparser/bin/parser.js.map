{"version":3,"sources":["../../../../node_modules/regjsparser/bin/parser"],"names":["fs","require","parse","jsesc","regexes","process","argv","splice","first","data","log","console","main","test","join","exit","forEach","snippet","result","error","message","stack"],"mappings":";;AACC,aAAW;;AAEV,MAAIA,KAAKC,QAAQ,IAAR,CAAT;AACA,MAAIC,QAAQD,QAAQ,WAAR,EAAqBC,KAAjC;AACA,MAAIC,QAAQF,QAAQ,OAAR,CAAZ;AACA,MAAIG,UAAUC,QAAQC,IAAR,CAAaC,MAAb,CAAoB,CAApB,CAAd;AACA,MAAIC,QAAQJ,QAAQ,CAAR,CAAZ;AACA,MAAIK,IAAJ;AACA,MAAIC,MAAMC,QAAQD,GAAlB;AACA,MAAIE,OAAO,SAAPA,IAAO,GAAW;AACpB,QAAI,4BAA4BC,IAA5B,CAAiCL,KAAjC,CAAJ,EAA6C;AAC3CE,UAAI,CACF,YADE,EAEF,2BAFE,EAGF,6BAHE,EAIF,eAJE,EAKF,6BALE,EAMF,+BANE,EAOFI,IAPE,CAOG,IAPH,CAAJ;AAQA,aAAOT,QAAQU,IAAR,CAAa,CAAb,CAAP;AACD;;AAEDX,YAAQY,OAAR,CAAgB,UAASC,OAAT,EAAkB;AAChC,UAAIC,MAAJ;AACA,UAAI;AACFA,iBAAShB,MAAMe,OAAN,CAAT;AACAP,YAAIP,MAAMe,MAAN,EAAc;AAChB,kBAAQ,IADQ;AAEhB,qBAAW,KAFK;AAGhB,oBAAU;AAHM,SAAd,CAAJ;AAKD,OAPD,CAOE,OAAMC,KAAN,EAAa;AACbT,YAAIS,MAAMC,OAAN,GAAgB,IAApB;AACAV,YAAI,oEAAJ;AACAA,YAAI,8DAAJ;AACAA,YAAI,sDAAJ;AACAA,YAAI,kBAAJ;AACAA,YAAIS,MAAME,KAAV;AACA,eAAOhB,QAAQU,IAAR,CAAa,CAAb,CAAP;AACD;AACF,KAlBD;AAmBA;AACA;AACA,WAAOV,QAAQU,IAAR,CAAa,CAAb,CAAP;AACD,GAnCD;;AAqCAH;AAED,CAhDA,GAAD","file":"parser.js","sourcesContent":["\n(function() {\n\n  var fs = require('fs');\n  var parse = require('../parser').parse;\n  var jsesc = require('jsesc');\n  var regexes = process.argv.splice(2);\n  var first = regexes[0];\n  var data;\n  var log = console.log;\n  var main = function() {\n    if (/^(?:-h|--help|undefined)$/.test(first)) {\n      log([\n        '\\nUsage:\\n',\n        '\\tregjsparser [regex ...]',\n        '\\tregjsparser [-h | --help]',\n        '\\nExamples:\\n',\n        '\\tregjsparser \\'^foo.bar$\\'',\n        '\\tregjsparser \\'[a-zA-Z0-9]\\''\n      ].join('\\n'));\n      return process.exit(1);\n    }\n\n    regexes.forEach(function(snippet) {\n      var result;\n      try {\n        result = parse(snippet);\n        log(jsesc(result, {\n          'json': true,\n          'compact': false,\n          'indent': '\\t'\n        }));\n      } catch(error) {\n        log(error.message + '\\n');\n        log('Error: failed to parse. Make sure the regular expression is valid.');\n        log('If you think this is a bug in regjsparser, please report it:');\n        log('\\thttps://github.com/jviereck/regjsparser/issues/new');\n        log('\\nStack trace:\\n');\n        log(error.stack);\n        return process.exit(1);\n      }\n    });\n    // Return with exit status 0 outside of the `forEach` loop, in case\n    // multiple regular expressions were passed in.\n    return process.exit(0);\n  };\n\n  main();\n\n}());\n"]}