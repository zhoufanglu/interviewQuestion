{"version":3,"sources":["../../../node_modules/regexpu-core/rewrite-pattern.js"],"names":["generate","require","parse","regenerate","iuMappings","ESCAPE_SETS","getCharacterClassEscapeSet","character","unicode","ignoreCase","UNICODE_IGNORE_CASE","UNICODE","REGULAR","object","hasOwnProperty","has","property","call","UNICODE_SET","addRange","BMP_SET","DOT_SET_UNICODE","clone","remove","DOT_SET","intersection","prototype","iuAddRange","min","max","$this","folded","caseFold","add","assign","target","source","key","update","item","pattern","tree","type","wrap","codePoint","processCharacterClass","characterClassItem","set","body","forEach","value","Error","negative","toString","processTerm","map","module","exports","flags","indexOf"],"mappings":"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","file":"rewrite-pattern.js","sourcesContent":["'use strict';\n\nvar generate = require('regjsgen').generate;\nvar parse = require('regjsparser').parse;\nvar regenerate = require('regenerate');\nvar iuMappings = require('./data/iu-mappings.json');\nvar ESCAPE_SETS = require('./data/character-class-escape-sets.js');\n\nfunction getCharacterClassEscapeSet(character) {\n\tif (unicode) {\n\t\tif (ignoreCase) {\n\t\t\treturn ESCAPE_SETS.UNICODE_IGNORE_CASE[character];\n\t\t}\n\t\treturn ESCAPE_SETS.UNICODE[character];\n\t}\n\treturn ESCAPE_SETS.REGULAR[character];\n}\n\nvar object = {};\nvar hasOwnProperty = object.hasOwnProperty;\nfunction has(object, property) {\n\treturn hasOwnProperty.call(object, property);\n}\n\n// Prepare a Regenerate set containing all code points, used for negative\n// character classes (if any).\nvar UNICODE_SET = regenerate().addRange(0x0, 0x10FFFF);\n// Without the `u` flag, the range stops at 0xFFFF.\n// https://mths.be/es6#sec-pattern-semantics\nvar BMP_SET = regenerate().addRange(0x0, 0xFFFF);\n\n// Prepare a Regenerate set containing all code points that are supposed to be\n// matched by `/./u`. https://mths.be/es6#sec-atom\nvar DOT_SET_UNICODE = UNICODE_SET.clone() // all Unicode code points\n.remove(\n// minus `LineTerminator`s (https://mths.be/es6#sec-line-terminators):\n0x000A, // Line Feed <LF>\n0x000D, // Carriage Return <CR>\n0x2028, // Line Separator <LS>\n0x2029 // Paragraph Separator <PS>\n);\n// Prepare a Regenerate set containing all code points that are supposed to be\n// matched by `/./` (only BMP code points).\nvar DOT_SET = DOT_SET_UNICODE.clone().intersection(BMP_SET);\n\n// Add a range of code points + any case-folded code points in that range to a\n// set.\nregenerate.prototype.iuAddRange = function (min, max) {\n\tvar $this = this;\n\tdo {\n\t\tvar folded = caseFold(min);\n\t\tif (folded) {\n\t\t\t$this.add(folded);\n\t\t}\n\t} while (++min <= max);\n\treturn $this;\n};\n\nfunction assign(target, source) {\n\tfor (var key in source) {\n\t\t// Note: `hasOwnProperty` is not needed here.\n\t\ttarget[key] = source[key];\n\t}\n}\n\nfunction update(item, pattern) {\n\t// TODO: Test if memoizing `pattern` here is worth the effort.\n\tif (!pattern) {\n\t\treturn;\n\t}\n\tvar tree = parse(pattern, '');\n\tswitch (tree.type) {\n\t\tcase 'characterClass':\n\t\tcase 'group':\n\t\tcase 'value':\n\t\t\t// No wrapping needed.\n\t\t\tbreak;\n\t\tdefault:\n\t\t\t// Wrap the pattern in a non-capturing group.\n\t\t\ttree = wrap(tree, pattern);\n\t}\n\tassign(item, tree);\n}\n\nfunction wrap(tree, pattern) {\n\t// Wrap the pattern in a non-capturing group.\n\treturn {\n\t\t'type': 'group',\n\t\t'behavior': 'ignore',\n\t\t'body': [tree],\n\t\t'raw': '(?:' + pattern + ')'\n\t};\n}\n\nfunction caseFold(codePoint) {\n\treturn has(iuMappings, codePoint) ? iuMappings[codePoint] : false;\n}\n\nvar ignoreCase = false;\nvar unicode = false;\nfunction processCharacterClass(characterClassItem) {\n\tvar set = regenerate();\n\tvar body = characterClassItem.body.forEach(function (item) {\n\t\tswitch (item.type) {\n\t\t\tcase 'value':\n\t\t\t\tset.add(item.codePoint);\n\t\t\t\tif (ignoreCase && unicode) {\n\t\t\t\t\tvar folded = caseFold(item.codePoint);\n\t\t\t\t\tif (folded) {\n\t\t\t\t\t\tset.add(folded);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'characterClassRange':\n\t\t\t\tvar min = item.min.codePoint;\n\t\t\t\tvar max = item.max.codePoint;\n\t\t\t\tset.addRange(min, max);\n\t\t\t\tif (ignoreCase && unicode) {\n\t\t\t\t\tset.iuAddRange(min, max);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'characterClassEscape':\n\t\t\t\tset.add(getCharacterClassEscapeSet(item.value));\n\t\t\t\tbreak;\n\t\t\t// The `default` clause is only here as a safeguard; it should never be\n\t\t\t// reached. Code coverage tools should ignore it.\n\t\t\t/* istanbul ignore next */\n\t\t\tdefault:\n\t\t\t\tthrow Error('Unknown term type: ' + item.type);\n\t\t}\n\t});\n\tif (characterClassItem.negative) {\n\t\tset = (unicode ? UNICODE_SET : BMP_SET).clone().remove(set);\n\t}\n\tupdate(characterClassItem, set.toString());\n\treturn characterClassItem;\n}\n\nfunction processTerm(item) {\n\tswitch (item.type) {\n\t\tcase 'dot':\n\t\t\tupdate(item, (unicode ? DOT_SET_UNICODE : DOT_SET).toString());\n\t\t\tbreak;\n\t\tcase 'characterClass':\n\t\t\titem = processCharacterClass(item);\n\t\t\tbreak;\n\t\tcase 'characterClassEscape':\n\t\t\tupdate(item, getCharacterClassEscapeSet(item.value).toString());\n\t\t\tbreak;\n\t\tcase 'alternative':\n\t\tcase 'disjunction':\n\t\tcase 'group':\n\t\tcase 'quantifier':\n\t\t\titem.body = item.body.map(processTerm);\n\t\t\tbreak;\n\t\tcase 'value':\n\t\t\tvar codePoint = item.codePoint;\n\t\t\tvar set = regenerate(codePoint);\n\t\t\tif (ignoreCase && unicode) {\n\t\t\t\tvar folded = caseFold(codePoint);\n\t\t\t\tif (folded) {\n\t\t\t\t\tset.add(folded);\n\t\t\t\t}\n\t\t\t}\n\t\t\tupdate(item, set.toString());\n\t\t\tbreak;\n\t\tcase 'anchor':\n\t\tcase 'empty':\n\t\tcase 'group':\n\t\tcase 'reference':\n\t\t\t// Nothing to do here.\n\t\t\tbreak;\n\t\t// The `default` clause is only here as a safeguard; it should never be\n\t\t// reached. Code coverage tools should ignore it.\n\t\t/* istanbul ignore next */\n\t\tdefault:\n\t\t\tthrow Error('Unknown term type: ' + item.type);\n\t}\n\treturn item;\n};\n\nmodule.exports = function (pattern, flags) {\n\tvar tree = parse(pattern, flags);\n\tignoreCase = flags ? flags.indexOf('i') > -1 : false;\n\tunicode = flags ? flags.indexOf('u') > -1 : false;\n\tassign(tree, processTerm(tree));\n\treturn generate(tree);\n};\n//# sourceMappingURL=rewrite-pattern.js.map"]}